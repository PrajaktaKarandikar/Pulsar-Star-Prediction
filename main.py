# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wfy7_54ML9d1cO1NE2ibmug40XmD1h1X
"""

from google.colab import drive
drive.mount('/content/drive')

#chek for import and directory settings

from google.colab import files
files.upload()

import sys
sys.path.insert(0,'/content/drive/MyDrive/Colab Notebooks/utils.py')

PROJ_DIR = '//'.join(os.path.dirname("/content/drive/MyDrive/EE660_Proj/").split("/"))

import os
import utils

import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import pickle 
import seaborn as sns

from sklearn.metrics import confusion_matrix, classification_report
from sklearn.metrics import roc_auc_score, roc_curve, accuracy_score ,plot_confusion_matrix
#import print_results, plot_confusion_mat, plot_roc_curve, plot_accuracy, calculate metrics

import warnings
warnings.filterwarnings("ignore")

#set seed
np.random.seed(30)

def run_best(model_name, estim, Xtrain, ytrain, Xtest, ytest):
  print(model_name)
  clfr = estim.fit(Xtrain, ytrain)
  y_pred = clfr.predict(Xtest)
  acc, mae, mse, rmse, auc_score, class_report = utils.calculate_metrics(ytest, y_pred)
  utils.print_results(acc, mae, mse, rmse, auc_score, class_report)
  cm = confusion_matrix(ytest, y_pred)
  utils.plot_confusion_mat(cm, model_name, "Confusion Matrix Best Model: {}".format(model_name))
  pred_prob = clfr.predict_proba(Xtest)
  utils.plot_roc_curve(model_name, ytest, pred_prob[:, 1])

if __name__ == "__main__":
  #Read data from local directory
  # Use the path from your local directory
  train = pd.read_csv("/content/drive/MyDrive/EE660_Proj/training_data.csv")
  val = pd.read_csv("/content/drive/MyDrive/EE660_Proj/validation_data.csv")
  test = pd.read_csv("/content/drive/MyDrive/EE660_Proj/test_data.csv")
  X_train = train.iloc[:, 0:8]
  y_train = train.iloc[:, -1]
  X_val = val.iloc[:, 0:8]
  y_val = val.iloc[:, -1]
  X_test = test.iloc[:, 0:8]
  y_test = test.iloc[:, -1]
  
  #Load Best Model
  print("Best Final Model")
  with open('BestModel.pickle', 'rb') as algo:
    clfr = pickle.load(algo)

  run_best("Random Forest", clfr, X_train, y_train, X_test, y_test)